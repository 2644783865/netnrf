using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Linq;
using System.Reflection;

namespace @dataNamespace@
{
    public class ContextBase : DbContext
    {
        /// <summary>
        /// 数据库
        /// </summary>
        private DataBase.TypeDB TDB;

        /// <summary>
        /// 配置连接字符串
        /// </summary>
        /// <param name="optionsBuilder"></param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            switch (TDB)
            {
                case DataBase.TypeDB.SQLServer:
                    optionsBuilder.UseSqlServer(DataBase.Configuration.GetConnectionString("SQLServerConn"), options =>
                    {
                        //启用 row_number 分页 （兼容2005、2008）
                        options.UseRowNumberForPaging();
                    });
                    break;
                case DataBase.TypeDB.SQLite:
                    optionsBuilder.UseSqlite(DataBase.Configuration.GetConnectionString("SQLiteConn"));
                    break;
            }
        }

        /// <summary>
        /// 上下文
        /// </summary>
        /// <param name="typeDB">数据库类型，默认SQLServer</param>
        public ContextBase(DataBase.TypeDB typeDB = DataBase.TypeDB.SQLServer) : base()
        {
            TDB = typeDB;
        }

        /// <summary>
        /// 反射注册实体类
        /// 
        /// DomainMapping  所在的程序集一定要写对，因为目前在当前项目所以是采用的当前正在运行的程序集。
        /// 如果你的mapping在单独的项目中 记得要加载对应的assembly 这是重点
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //实体映射模块名称
            string MapNamespace = DataBase.ProjectAttr.Mapping + ".dll";
            //Map dll path
            string path = Assembly.GetExecutingAssembly().CodeBase.Replace(GetType().Module.Name, MapNamespace).Replace("file:///", "");

            var modelObject = Assembly.LoadFile(path).GetTypes();

            //var moFilter = modelObject.Where(type => !String.IsNullOrEmpty(type.Namespace))
            //    .Where(type => type.BaseType != null && type.BaseType.BaseType != null
            //    && type.BaseType.BaseType.GetGenericTypeDefinition() == typeof(IEntityTypeConfiguration<>)).ToList();

            foreach (var mo in modelObject)
            {
                if (mo.Name != "<>c")
                {
                    //modelBuilder.Model.AddEntityType(mo);
                    dynamic configurationInstance = Activator.CreateInstance(mo);
                    modelBuilder.ApplyConfiguration(configurationInstance);
                }
            }

            base.OnModelCreating(modelBuilder);
        }
    }
}
